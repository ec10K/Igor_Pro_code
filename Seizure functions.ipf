#pragma TextEncoding = "UTF-8"
#pragma rtGlobals=3		// Use modern global access method and strict wave access.

#pragma TextEncoding = "UTF-8"
#pragma rtGlobals=3		// Use modern global access method and strict wave access.

///cycle through list items and do same thing on each 
///saves reentring information
/////////////////////////// Have to make sure that there are no extra waves beginning with wildcard tag other than
/////////////////////////// those generated by seizure batch analysis
/////Elvis Cela



function cyclelist()


string list_ripples = wavelist("ictalrip_max_*",";","")
list_ripples = sortlist (list_ripples,";",16)
print list_ripples


string list_fripples = wavelist("ictalfrip_max_*",";","")
list_fripples = sortlist (list_fripples,";",16)
print list_fripples

string list_delta = wavelist("ictaldel_max_*",";","")
list_delta= sortlist (list_delta,";",16)
print list_delta

string list_theta = wavelist("ictalthet_max_*",";","")
list_theta= sortlist (list_theta,";",16)
print list_theta

string list_seizdur = wavelist("wseizuredur_*",";","")
list_seizdur= sortlist (list_seizdur,";",16)
print list_seizdur

string list_seizloc = wavelist("wseizureloc_*",";","")
list_seizloc= sortlist (list_seizloc,";",16)
print list_seizloc

string list_sess = wavelist("wsession_*",";","")
list_sess= sortlist (list_sess,";",16)
print list_sess

string list_preictal_rip = wavelist("ictalrip_base_*",";","")
list_preictal_rip = sortlist(list_preictal_rip,";",16)
print list_preictal_rip

string list_preictal_del = wavelist("ictaldel_base_*",";","")
list_preictal_del = sortlist(list_preictal_del,";",16)
print list_preictal_del

string list_preictal_frip = wavelist("ictalfrip_base_*",";","")
list_preictal_frip = sortlist(list_preictal_frip,";",16)
print list_preictal_frip

string list_preictal_thet =wavelist("ictalthet_base_*",";","")
list_preictal_thet = sortlist(list_preictal_thet,";",16)
print list_preictal_thet



//check that waves are same number of points
	if (itemsinlist(list_ripples) != 12 || itemsinlist(list_fripples) != 12 || itemsinlist(list_delta) != 12 || itemsinlist(list_theta) != 12 || itemsinlist(list_seizdur) != 12 || itemsinlist(list_seizloc) != 12 || itemsinlist(list_sess) != 12)
		DoAlert 0, "There are more than 12 waves- check data browser."
			// Execute if condition is TRUE
	endif




string names

wave ripples_list_all
wave fripples_list_all
wave seizdur_list_all
wave seizloc_list_all
wave sess_list_all
wave delta_list_all
wave theta_list_all
wave ripples_preictal_list_all
wave fripples_preictal_list_all
wave delta_preictal_list_all
wave theta_preictal_list_all


variable i,j,k,l,m
//////////////////////////////////////////////////////////////////
////// preictal waves/////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

/////delta

concatenate/NP/O list_preictal_del,delta_preictal_list_all



/////theta 
concatenate/NP/O list_preictal_thet,theta_preictal_list_all


////ripples
concatenate/NP/O list_preictal_rip,ripples_preictal_list_all


///fripples
concatenate/NP/O list_preictal_frip,fripples_preictal_list_all



//////////////////////////////////////////////////////////////////
/////////////////// ictal waves//////////////////////////////////
//////////////////////////////////////////////////////////////////
//delta
concatenate/NP/O list_delta,delta_list_all
//print delta_list_all
print "number of waves delta",itemsinlist(list_delta)

///theta
concatenate/NP/O list_theta,theta_list_all
//print theta_list_all
print "number of waves theta",itemsinlist(list_theta)


//ripples
concatenate/NP/O list_ripples,ripples_list_all
//print list_ripples
print "number of waves ripples",itemsinlist(list_ripples)

///fast ripples
concatenate/NP/O list_fripples,fripples_list_all
//print list_fripples
print "number of waves fripples",itemsinlist(list_fripples)

///seizdur
//concatenate/NP/O list_seizdur,seizdur_list_all
//print list_seizdur
print "number of waves seizdur", itemsinlist(list_seizdur)


//seizloc

concatenate/NP/O list_seizloc,seizloc_list_all
//print list_seizloc
print "number of waves seizloc",itemsinlist(list_seizloc)

//sess
concatenate /NP/O list_sess,sess_list_all
//print list_sess
print "number of waves session", itemsinlist(list_sess)

Make/O/N=(numpnts(seizloc_list_all)) ripples_dif,fripples_dif,delta_dif,theta_dif
MatrixOP/O ripples_dif= ripples_list_all - seizloc_list_all
MatrixOP/O fripples_dif = fripples_list_all - seizloc_list_all
MatrixOP/O delta_dif = delta_list_all - seizloc_list_all
MatrixOP/O theta_dif = theta_list_all - seizloc_list_all

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//Outlier removal/////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
wavestats /Q ripples_dif 
variable uppper_ripples = median(ripples_dif) + (2.7*V_Sdev)
variable lower_ripples =  median(ripples_dif) - (2.7*V_sdev)

variable p =0
variable numpoints_rip = numpnts(ripples_dif)
variable numoutliers_rip = 0
variable valrip



	do
		valrip = ripples_dif[p]
		if ((valrip < lower_ripples) %| (valrip > uppper_ripples) %| (valrip >100))	// is this an outlier?
			numOutliers_rip += 1
		else										// if not an outlier
			ripples_dif[p - numOutliers_rip] = valrip		// copy to input wave
		endif
		p += 1
	while (p < numPoints_rip)

do
	valrip = ripples_dif[p]
	if ((valrip < lower_ripples) %| (valrip > uppper_ripples) %| (valrip >100))	// is this an outlier?
	ripples_dif[p] = Nan
	numOutliers_rip += 1
	endif
	p+=1
while(p< numpoints_rip)

	
print "outliers found",numoutliers_rip

	
//////////////////////////////////////////////////////////////////
wavestats /Q fripples_dif 
variable uppper_fripples = median(fripples_dif) + (2.7*V_Sdev)
variable lower_fripples =  median(fripples_dif) - (2.7*V_sdev)	
	
variable q=0
variable numpoints_frip = numpnts(fripples_dif)
variable numoutliers_frip = 0
variable valfrip




do
	valfrip = fripples_dif[q]
	if ((valfrip < lower_fripples) %| (valfrip > uppper_fripples) %| (valfrip >100))	// is this an outlier?
	fripples_dif[q] = Nan
	numOutliers_frip += 1
	endif
	q+=1
while(q< numpoints_frip)
	

print "outliers found",numoutliers_frip
	

//////////////////////////////////////////////////////////////////
wavestats /Q delta_dif 
variable uppper_delta = median(delta_dif) + (2.7*V_Sdev)
variable lower_delta =  median(delta_dif) - (2.7*V_sdev)	
	
variable r=0
variable numpoints_delta = numpnts(delta_dif)
variable numoutliers_delta = 0
variable valdelta





do
	valdelta = delta_dif[r]
	if ((valdelta < lower_delta) %| (valdelta > uppper_delta) %| (valdelta >100))	// is this an outlier?
	delta_dif[r] = Nan
	numOutliers_delta += 1
	endif
	r+=1
while(r< numpoints_delta)
	


print "outliers found",numoutliers_delta
	
//////////////////////////////////////////////////////////////////
wavestats /Q theta_dif 
variable uppper_theta = median(theta_dif) + (2.7*V_Sdev)
variable lower_theta =  median(theta_dif) - (2.7*V_sdev)	
	
variable s=0
variable numpoints_theta = numpnts(theta_dif)
variable numoutliers_theta = 0
variable valtheta




do
	valtheta = theta_dif[s]
	if ((valtheta < lower_theta) %| (valtheta > uppper_theta) %| (valtheta >100))	// is this an outlier?
	theta_dif[s] = Nan
	numOutliers_theta += 1
	endif
	s+=1
while(s< numpoints_theta)
	


print "outliers found",numoutliers_theta




//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////


edit ripples_list_all,fripples_list_all,seizloc_list_all,sess_list_all,ripples_dif,fripples_dif
qp("ripples_dif","sess_list_all")//;nw("ripples_dif")
qp("fripples_dif","sess_list_all")
qp("delta_dif","sess_list_all")
qp("theta_dif","sess_list_all")

Execute "TileWindows/W=(2,25,840,800) theta_dif_vs_sess_list_all,ripples_dif_vs_sess_list_all,fripples_dif_vs_sess_list_all,delta_dif_vs_sess_list_all"





End

#pragma TextEncoding = "UTF-8"
#pragma rtGlobals=3		// Use modern global access method and strict wave access.

#pragma TextEncoding = "UTF-8"
#pragma rtGlobals=3		// Use modern global access method and strict wave access.

///////////// select subset of waves on analysis based on selected criteria


function subset_anal()

//initialize concatenated waves
///make sure they are arranged in the same order and have same lengths by running 
wave wseizure_dur_all
wave wseizure_loc_all
wave peak_pow_ripples_all
wave peak_pow_fripples_all
wave peak_pow_delta_all
wave peak_pow_theta_all
wave wsession_all
wave pow_preictal_ripples_all
wave pow_preictal_fripples_all
wave pow_preictal_delta_all
wave pow_preictal_theta_all
wave pow_ictal_ripples_all
wave pow_ictal_fripples_all
wave pow_ictal_delta_all
wave pow_ictal_theta_all
wave csd_pre_all
wave csd_post_all


wave ripples_list_all
wave fripples_list_all
wave delta_list_all
wave theta_list_all



/////selection on diff waves to compare kindling vs rekindling
wave ripples_dif
wave fripples_dif
wave theta_dif
wave delta_dif
wave sess_list_all
wave csd_length_all

//concatenate waves before analysis
// waves with dup suffix have duplicates in them that must be removed before analysis

concatenate/O {root:wSeizureDur_bol,root:wSeizureDur_can,root:wSeizureDur_eul,root:wSeizureDur_fft,root:wSeizureDur_fof,root:wSeizureDur_hab,root:wSeizureDur_her,root:wSeizureDur_roe,root:wSeizureDur_tof,root:wSeizureDur_tws,root:wSeizureDur_twt,root:wSeizureDur_tww},wseizure_dur_all_dup
Duplicate/O wseizure_dur_all_dup, wseizure_dur_all
Findduplicates /SN=(Nan) /TOL=0.001 /SNDS= wseizure_dur_all wseizure_dur_all_dup //remove duplicates

concatenate/O {root:wSeizureLoc_bol,root:wSeizureLoc_can,root:wSeizureLoc_eul,root:wSeizureLoc_fft,root:wSeizureLoc_fof,root:wSeizureLoc_hab,root:wSeizureLoc_her,root:wSeizureLoc_roe,root:wSeizureLoc_tof,root:wSeizureLoc_tws,root:wSeizureLoc_twt,root:wSeizureLoc_tww},wseizure_loc_all_dup
Duplicate/O wseizure_loc_all_dup, wseizure_loc_all
Findduplicates /SN= (NAn)  /TOL=0.001 /SNDS= wseizure_loc_all wseizure_loc_all_dup //remove duplicates

concatenate/O {root:peak_pow_ripples_bol,root:peak_pow_ripples_can,root:peak_pow_ripples_eul,root:peak_pow_ripples_fft,root:peak_pow_ripples_fof,root:peak_pow_ripples_hab,root:peak_pow_ripples_her,root:peak_pow_ripples_roe,root:peak_pow_ripples_tof,root:peak_pow_ripples_tws,root:peak_pow_ripples_twt,root:peak_pow_ripples_tww},peak_pow_ripples_all_dup
Duplicate/O peak_pow_ripples_all_dup,peak_pow_ripples_all
Findduplicates /SN= (NAn)  /TOL=0.001 /SNDS= peak_pow_ripples_all peak_pow_ripples_all_dup //remove duplicates

concatenate/O {root:peak_pow_fripples_bol,root:peak_pow_fripples_can,root:peak_pow_fripples_eul,root:peak_pow_fripples_fft,root:peak_pow_fripples_fof,root:peak_pow_fripples_hab,root:peak_pow_fripples_her,root:peak_pow_fripples_roe,root:peak_pow_fripples_tof,root:peak_pow_fripples_tws,root:peak_pow_fripples_twt,root:peak_pow_fripples_tww},peak_pow_fripples_all_dup
Duplicate/O peak_pow_fripples_all_dup,peak_pow_fripples_all
Findduplicates /SN= (NAn)  /TOL=0.001 /SNDS= peak_pow_fripples_all peak_pow_fripples_all_dup //remove duplicates

concatenate/O {root:peak_pow_delta_bol,root:peak_pow_delta_can,root:peak_pow_delta_eul,root:peak_pow_delta_fft,root:peak_pow_delta_fof,root:peak_pow_delta_hab,root:peak_pow_delta_her,root:peak_pow_delta_roe,root:peak_pow_delta_tof,root:peak_pow_delta_tws,root:peak_pow_delta_twt,root:peak_pow_delta_tww},peak_pow_delta_all_dup
Duplicate/O peak_pow_delta_all_dup,peak_pow_delta_all
Findduplicates /SN= (NAn)  /TOL=0.001 /SNDS= peak_pow_delta_all peak_pow_delta_all_dup //remove duplicates

concatenate/O {root:peak_pow_theta_bol,root:peak_pow_theta_can,root:peak_pow_theta_eul,root:peak_pow_theta_fft,root:peak_pow_theta_fof,root:peak_pow_theta_hab,root:peak_pow_theta_her,root:peak_pow_theta_roe,root:peak_pow_theta_tof,root:peak_pow_theta_tws,root:peak_pow_theta_twt,root:peak_pow_theta_tww},peak_pow_theta_all_dup
Duplicate/O peak_pow_theta_all_dup,peak_pow_theta_all
Findduplicates /SN= (NAn)  /TOL=0.001 /SNDS= peak_pow_theta_all peak_pow_theta_all_dup //remove duplicates

concatenate/O {root:wsession_bol,root:wsession_can,root:wsession_eul,root:wsession_fft,root:wsession_fof,root:wsession_hab,root:wsession_her,root:wsession_roe,root:wsession_tof,root:wsession_tws,root:wsession_twt,root:wsession_tww},wsession_all


////concatenate csd  waves
concatenate/O {root:csd_pre_bol,root:csd_pre_can,root:csd_pre_eul,root:csd_pre_fft,root:csd_pre_fof,root:csd_pre_hab,root:csd_pre_her,root:csd_pre_roe,root:csd_pre_tof,root:csd_pre_tws,root:csd_pre_twt,root:csd_pre_tww},csd_pre_all_dup
Duplicate/O csd_pre_all_dup csd_pre_all
Findduplicates /SN= (NAn)  /TOL=0.001 /SNDS= csd_pre_all csd_pre_all_dup //remove duplicates


concatenate/O {root:csd_post_bol,root:csd_post_can,root:csd_post_eul,root:csd_post_fft,root:csd_post_fof,root:csd_post_hab,root:csd_post_her,root:csd_post_roe,root:csd_post_tof,root:csd_post_tws,root:csd_post_twt,root:csd_post_tww},csd_post_all_dup
Duplicate/O csd_post_all_dup csd_post_all
Findduplicates /SN= (NAn)  /TOL=0.001 /SNDS= csd_post_all csd_post_all_dup //remove duplicates



concatenate/O {root:csd_length_bol,root:csd_length_can,root:csd_length_eul,root:csd_length_fft,root:csd_length_fof,root:csd_length_hab,root:csd_length_her,root:csd_length_roe,root:csd_length_tof,root:csd_length_tws,root:csd_length_twt,root:csd_length_tww},csd_length_all

wavestats/Q csd_length_all
print "Average csd length before outlier removed", V_avg






//check that waves are same number of points
	if (numpnts(wseizure_dur_all) != 107 || numpnts(wseizure_loc_all) != 107)
		DoAlert 0, "There are more than 12 waves- check data browser."
			// Execute if condition is TRUE
	endif





///concatenate the ictal and preictal V_avg waves 

concatenate/O {root:pow_preictal_ripples_bol,root:pow_preictal_ripples_can,root:pow_preictal_ripples_eul,root:pow_preictal_ripples_fft,root:pow_preictal_ripples_fof,root:pow_preictal_ripples_hab,root:pow_preictal_ripples_her,root:pow_preictal_ripples_roe,root:pow_preictal_ripples_tof,root:pow_preictal_ripples_tws,root:pow_preictal_ripples_twt,root:pow_preictal_ripples_tww},pow_preictal_ripples_all
concatenate/O {root:pow_ictal_ripples_bol,root:pow_ictal_ripples_can,root:pow_ictal_ripples_eul,root:pow_ictal_ripples_fft,root:pow_ictal_ripples_fof,root:pow_ictal_ripples_hab,root:pow_ictal_ripples_her,root:pow_ictal_ripples_roe,root:pow_ictal_ripples_tof,root:pow_ictal_ripples_tws,root:pow_ictal_ripples_twt,root:pow_ictal_ripples_tww},pow_ictal_ripples_all
concatenate/O {root:pow_ictal_fripples_bol,root:pow_ictal_fripples_can,root:pow_ictal_fripples_eul,root:pow_ictal_fripples_fft,root:pow_ictal_fripples_fof,root:pow_ictal_fripples_hab,root:pow_ictal_fripples_her,root:pow_ictal_fripples_roe,root:pow_ictal_fripples_tof,root:pow_ictal_fripples_tws,root:pow_ictal_fripples_twt,root:pow_ictal_fripples_tww},pow_ictal_fripples_all
concatenate/O {root:pow_preictal_fripples_bol,root:pow_preictal_fripples_can,root:pow_preictal_fripples_eul,root:pow_preictal_fripples_fft,root:pow_preictal_fripples_fof,root:pow_preictal_fripples_hab,root:pow_preictal_fripples_her,root:pow_preictal_fripples_roe,root:pow_preictal_fripples_tof,root:pow_preictal_fripples_tws,root:pow_preictal_fripples_twt,root:pow_preictal_fripples_tww},pow_preictal_fripples_all



Make/O low_freq_dif
Make/O high_freq_dif
Make/O double_sess
concatenate/O/NP {theta_dif,delta_dif},low_freq_dif
concatenate/O/NP {ripples_dif,fripples_dif},high_freq_dif
concatenate/O/NP {sess_list_all,sess_list_all},double_sess ///need to generate a wave with twice the amount of sess_list since will combine low and high frequencies for analysis
///variables for determining selection criteria

variable max_session = 26      //choose maximum session analysis will be performed on
variable seiz_dur_up = 60  // maxmimum seizure duration, 0 is default
variable seiz_dur_low = 4    ///lowest duration seizure
variable seiz_loc_lower = 0			///time that seizure occurs lower range, 0 is default
variable seiz_loc_upper = 1200	///time that seizure occurs upper range, 2000 is default
variable peak_pow_upper_delta = 1200 /// upper time limit delta
variable peak_pow_upper_theta = 1200/// upper time theta
variable sess_list_min = 26  //// number of sessions to analyze
variable csd_length_low =10   /// the lowest csd length allowed in the analysis






print "Selection criteria"
print "Analyzed up to session=",max_session 
print "seizure duration upper =",seiz_dur_up
print "seizure duration lower=",seiz_dur_low
print "The lower minimum time is", seiz_loc_lower
Print "The upper max time is", seiz_loc_upper
print "the upper time delta cutoff is", peak_pow_upper_delta
print "the upper time theta curoff is",peak_pow_upper_theta
print "lowest csd length included in analysis is", csd_length_low

///// initialize selection process

Variable i = 0
Variable n = numpnts(wSeizure_dur_all)
variable sessions= numpnts(double_sess)
variable j=0

Make/O/N =(0) wsession_sel
Make/O/N =(0) wseizure_dur_sel
Make/O/N =(0) wseizure_loc_sel
Make/O/N =(0) peak_pow_ripples_sel
Make/O/N =(0) peak_pow_fripples_sel
Make/O/N =(0) peak_pow_delta_sel
Make/O/N =(0) peak_pow_theta_sel
Make/O/N =(0) double_sess_sel
Make/O/N =(0) low_freq_dif_sel_kin
Make/O/N =(0) high_freq_dif_sel_kin
Make/O/N =(0) low_freq_dif_sel_rek
Make/O/N =(0) high_freq_dif_sel_rek
Make/O/N =(0) pow_preictal_ripples_sel
Make/O/N =(0) pow_ictal_ripples_sel
Make/O/N =(0) pow_preictal_fripples_sel
Make/O/N =(0) pow_ictal_fripples_sel
Make/O/N =(0) pow_preictal_theta_sel
Make/O/N =(0) pow_ictal_theta_sel
Make/O/N =(0) pow_preictal_delta_sel
Make/O/N =(0) pow_ictal_delta_sel
Make/O/N =(0) ripples_list_sel
Make/O/N =(0) fripples_list_sel
Make/O/N =(0) delta_list_sel
Make/O/N =(0) theta_list_sel
Make/O/N =(0) csd_pre_all_sel
Make/O/N =(0) csd_post_all_sel
Make/O/N= (0) csd_length_sel



//Loop through waves to construct new subwaves that pass selection criteria

do
	if ((wseizure_dur_all[i] < seiz_dur_up) &&(wseizure_dur_all[i]>seiz_dur_low) && (wseizure_loc_all[i] > seiz_loc_lower) && (wseizure_loc_all[i] < seiz_loc_upper )&&(peak_pow_delta_all[i]<peak_pow_upper_delta)&&(wsession_all[i]<=max_session))
	wseizure_dur_sel[numpnts(wseizure_dur_sel)]= {wseizure_dur_all[i]}
	
	wseizure_loc_sel[numpnts(wseizure_loc_sel)]= {wseizure_loc_all[i]}
	peak_pow_ripples_sel[numpnts(peak_pow_ripples_sel)]= {peak_pow_ripples_all[i]}
	peak_pow_fripples_sel[numpnts(peak_pow_fripples_sel)]= {peak_pow_fripples_all[i]}
	peak_pow_delta_sel[numpnts(peak_pow_delta_sel)]= {peak_pow_delta_all[i]}
	peak_pow_theta_sel[numpnts(peak_pow_theta_sel)]= {peak_pow_theta_all[i]}
	wsession_sel[numpnts(wsession_sel)]= {wsession_all[i]}
	
	pow_preictal_ripples_sel[numpnts(pow_preictal_ripples_sel)]= {pow_preictal_ripples_all[i]}
   pow_ictal_ripples_sel[numpnts(pow_ictal_ripples_sel)]= {pow_ictal_ripples_all[i]}
   pow_preictal_fripples_sel[numpnts(pow_preictal_fripples_sel)]= {pow_preictal_fripples_all[i]}
   pow_ictal_fripples_sel[numpnts(pow_ictal_fripples_sel)]= {pow_ictal_fripples_all[i]}
   
	ripples_list_sel[numpnts(ripples_list_sel)]= {ripples_list_all[i]}
	fripples_list_sel[numpnts(fripples_list_sel)]= {fripples_list_all[i]}
	delta_list_sel[numpnts(delta_list_sel)]= {delta_list_all[i]}
	theta_list_sel[numpnts(theta_list_sel)]={theta_list_all[i]}
		if((csd_pre_all[i]<10) && (csd_post_all[i])<10 )
		csd_pre_all_sel[numpnts(csd_pre_all_sel)]= {csd_pre_all[i]}
		csd_post_all_sel[numpnts(csd_post_all_sel)]={csd_post_all[i]}
		endif
	
	endif
	i+=1
	
while(i<n)




do
	if (double_sess[j]<=sess_list_min)
	low_freq_dif_sel_rek[numpnts(low_freq_dif_sel_rek)]={low_freq_dif[j]}
	high_freq_dif_sel_rek[numpnts(high_freq_dif_sel_rek)]={high_freq_dif[j]}
	
	else
	low_freq_dif_sel_kin[numpnts(low_freq_dif_sel_kin)]={low_freq_dif[j]}
	high_freq_dif_sel_kin[numpnts(high_freq_dif_sel_kin)]={high_freq_dif[j]}
	
	endif
	j+=1
	
while(j<sessions)

variable var12

do
	if (csd_length_all[var12]> csd_length_low)
	csd_length_sel[numpnts(csd_length_sel)]={csd_length_all[var12]}
	
	endif
	var12+=1
while(var12<numpnts(csd_length_all))

variable rr= 0






////// perform statistics and display graphs



variable p_value
variable t_stat

p_value = JT_MakePairedPlot(peak_pow_ripples_sel,peak_pow_delta_sel,"baseName1","ripples","ripples","ripples","delta","timepeak")

Quickstars(JT_p2sigStr(p_value))

Make/O/T/N=2 ripples_sel_xlabel
ripples_sel_xLabel = {"ripples","delta"}
label left, "peak time(s)"
Execute "ProduceMeanTrace()"
ModifyGraph mode=4,marker=19,msize(avgWave_left)=5
rename avgwave_left, avgwave_basename1

p_value = JT_MakePairedPlot(peak_pow_fripples_sel,peak_pow_delta_sel,"baseName2","fripples","fripples","fripples","delta","timepeak")

Quickstars(JT_p2sigStr(p_value))
Make/O/T/N=2 fripples_sel_xlabel
fripples_sel_xLabel = {"fripples","delta"}
label left, "peak time(s)"
Execute "ProduceMeanTrace()"
ModifyGraph mode=4,marker=19,msize(avgWave_left)=5
rename avgwave_left, avgwave_basename2


p_value = JT_MakePairedPlot(peak_pow_ripples_sel,peak_pow_theta_sel,"baseName3","ripples2","ripples2","ripples","theta","timepeak")

Quickstars(JT_p2sigStr(p_value))
Make/O/T/N=2 ripples_sel2_xlabel
ripples_sel2_xLabel = {"ripples","theta"}
label left, "peak time(s)"
Execute "ProduceMeanTrace()"
ModifyGraph mode=4,marker=19,msize(avgWave_left)=5
rename avgwave_left, avgwave_basename3

p_value = JT_MakePairedPlot(peak_pow_fripples_sel,peak_pow_theta_sel,"baseName4","fripples2","fripples2","fripples","theta","timepeak")


Quickstars(JT_p2sigStr(p_value))
Make/O/T/N=2 fripples_sel2_xlabel
fripples_sel2_xLabel = {"fripples","theta"}
label left, "peak time(s)"
Execute "ProduceMeanTrace()"
ModifyGraph mode=4,marker=19,msize(avgWave_left)=5
rename avgwave_left, avgwave_basename4


p_value = JT_MakePairedPlot(high_freq_dif_sel_kin,low_freq_dif_sel_kin,"baseName5","lohi_freq_kin","lohi_freq_kin","high freq","low freq","seizure onset)")

Quickstars(JT_p2sigStr(p_value))
Make/O/T/N=2 lohi_freq_kin_xlabel
lohi_freq_kin_xlabel = {"high freq","low freq"}
label left, "time after seizure onset (s)"
Execute "ProduceMeanTrace()"
ModifyGraph mode=4,marker=19,msize(avgWave_left)=5
rename avgwave_left, avgwave_basename5

p_value = JT_MakePairedPlot(high_freq_dif_sel_rek,low_freq_dif_sel_rek,"baseName6","lohi_freq_rek","lohi_freq_rek","high freq","low freq","seizure onset)")


Quickstars(JT_p2sigStr(p_value))
Make/O/T/N=2 lohi_freq_rek_xlabel
lohi_freq_rek_xlabel = {"high freq","low freq"}
label left, "time after seizure onset (s)"
Execute "ProduceMeanTrace()"
ModifyGraph mode=4,marker=19,msize(avgWave_left)=5
rename avgwave_left, avgwave_basename6

p_value = JT_MakePairedPlot(csd_pre_all_sel,csd_post_all_sel,"baseName7","csd_pre_post","csd_pre_post","pre","post","power)")

Quickstars(JT_p2sigStr(p_value))
Make/O/T/N=2 csd_pre_post_xLabel
csd_pre_post_xLabel = {"pre","post"}
label left, "power"
Execute "ProduceMeanTrace()"
ModifyGraph mode=4,marker=19,msize(avgWave_left)=5
rename avgwave_left, avgwave_basename7


//Determine the proporion of sessions that have a CSD-like event

Print "The % of sessions with a csd event is", (rightx(csd_length_sel)/rightx(csd_length_all))*100


JT_ArrangeGraphs2("ripples;fripples;ripples2;fripples2;lohi_freq_kin;lohi_freq_rek;csd_pre_post",3,4)
end
